help(c)
x <- 'Hello world!\n'
cat(x)
print(x)
HelloWorld <-3
x <- HelloWorld-1
cat(x)
print(x)
x <- 3
class(x) <- "myclass"
cat(x, "\n")
cat(unclass(x), "\n")  # same
# using x from above
print.myclass <- function(x) cat("***", x, "***\n")
print(x)
class(x) <- "myclass"
cat(x, "\n")
class(x) <- "myclass"
cat(x)
cat(unclass(x))  # same
set.seed(5)
N <- 12
x <- rpois(N, rpois(N, 1.5))
x
x <- runif(10)
print(x)
x <- runif(1:10)
print(x)
x <- c(1:10)
print(x)
# Space separator
cat(x)
# Multi-space separator
cat(x, sep=" . ")
# Separates each number by a tab
cat(x, sep="\t")
# Line Break separator
cat(x, sep="\n")
# Separates each number by a line break
cat(x, sep="\n")
y <- sample(c("home", "away"), x, TRUE)
y
cat(x, y)
cat(x[1], y[1], sep="\t")
set.seed(5)
N <- 12
x <- rpois(N, rpois(N, 1.5))
x
# Space separator
cat(x)
# Multi-space separator
cat(x, sep=" . ")
# Tab separator
cat(x, sep="\t")
# Line Break separator
cat(x, sep="\n")
y <- sample(c("home", "away"), N, TRUE)
y
cat(x, y)
y <- sample(c("home", "away"), N, TRUE)
y
cat(x, y)
x <- c(1:10)
print(x)
# Space separator
cat(x)
# Multi-space separator, and adds a period between each number
cat(x, sep=" . ")
# Separates each number by a tab
cat(x, sep="\t")
# Separates each number by a line break
cat(x, sep="\n")
#########################
y <- sample(c("home", "away"), N, TRUE)
y
cat(x, y)
cat(x[1], y[1], sep="\t")
set.seed(5)
N <- 12
x <- rpois(N, rpois(N, 1.5))
x
# Space separator
cat(x)
# Multi-space separator
cat(x, sep=" . ")
# Tab separator
cat(x, sep="\t")
# Line Break separator
cat(x, sep="\n")
y <- sample(c("home", "away"), N, TRUE)
y
cat(x, y)
cat(x[1], y[1], sep="\t")
x <- c(1:10)
print(x)
# Space separator
cat(x)
# Multi-space separator, and adds a period between each number
cat(x, sep=" . ")
# Separates each number by a tab
cat(x, sep="\t")
# Separates each number by a line break
cat(x, sep="\n")
y <- sample(c("home", "away"), N, TRUE)
y
cat(x, y)
cat(x[1], y[1], sep="\t")
y <- sample(c("red", "blue"), N, TRUE)
y
# use cat to concatenate the two atomic vectors x and y
cat(x, y)
#use cat to specify which values to print (first value of each vector) and separate those two values by a tab
cat(x[1], y[1], sep="\t")
z <- cat(x[1], y[1], sep="\t")
z
cat(z, file="data1.txt", append=TRUE)
cat(z)
y <- sample(c("red", "blue"), 10, TRUE)
y
# use cat to concatenate and print the two atomic vectors x and y
cat(x, y)
#use cat to specify which values to print (first value of each vector) and separate those two values by a tab.
cat(x[1], y[1], sep="\t")
help(rev)
x <- runif(10)
x
rev(x)
x <- c("red", "orange", "blue")
#check it out
print(x)
x <- c("red","orange","blue")
#check it out
print(x)
#now reverse the order of the vector and print
rev(x)
helo(cumprod)
help(cumprod)
cumprod(x)
x <-c(3,5,10)
cumprod(x)
3*5*10
help(write.csv)
A <- 1:16
B <- rep(c("red","blue","green","orange"))
data.frame(A,B,stringsAsFactors = FALSE)
B <- rep(c("red","blue","green","orange"), each = 5)
data.frame(A,B,stringsAsFactors = FALSE)
B <- rep(c("red","blue","green","orange"), each = 2)
data.frame(A,B,stringsAsFactors = FALSE)
A <- 1:10
B <- rep(c("red","blue","green","orange"), each = 5)
data.frame(A,B,stringsAsFactors = FALSE)
varA <- 1:12
varB <- rep(c("Con", "LowN", "HighN"), each=4) #4 values of each
varC <- runif(12)
dFrame <- data.frame(varA,varB,varC,stringsAsFactors = FALSE)
print(dFrame)
A <- 1:16
B <- rep(c("red","blue","green","orange"))
B <- rep(c("red","blue","green","orange"), each =2)
data.frame(A,B,stringsAsFactors = FALSE)
A <- 1:16
B <- rep(c("red","blue","green","orange"), each =4)
data.frame(A,B,stringsAsFactors = FALSE)
C <-runif(16)
data.frame(A,B,C,stringsAsFactors = FALSE)
write.csv(data, "data.csv", row.names = FALSE)
A <- 1:16
B <- rep(c("red","blue","green","orange"), each =4)
C <-runif(16)
data <- data.frame(A,B,C,stringsAsFactors = FALSE)
# write to a file, without row names
write.csv(data, "data.csv")
# same, except without row names
write.csv(data, "data.csv", row.names = FALSE)
# same, except of "blue", use "cyan"
write.csv(data, "data.csv", row.names = FALSE, blue = "cyan")
A <- 1:16
B <- rep(c("red","blue","green","NA"), each =4)
C <-runif(16)
data <- data.frame(A,B,C,stringsAsFactors = FALSE)
# write to a file, without row names
write.csv(data, "data.csv")
# same, except without row names
write.csv(data, "data.csv", row.names = FALSE)
# same, except of "NA", return blank cell
write.csv(data, "data.csv", row.names = FALSE, na = "")
read.csv("data.csv")
help(rep_len)
rep_len(c("finch","thrush","warbler"),20)
help(read.delim)
help(all.equal)
sample()
help(sample)
x <- runif(1:1000)
# take a sample of 100 from x
# without replacement (we will never find duplicates)
sample(x, 100, replace = FALSE)
x <- runif(1:1000)
# take a sample of 100 from x
# without replacement (we will never find duplicates)
sample(x, 2000, replace = TRUE)
sample(x, 2000, replace = FALSE)
sample(x, 1500, replace = TRUE)
help(setequal)
x <- 1:100
y <- 2:101
setequal(x,y)
birds <- rep_len(c("finch","thrush","warbler"),20)
birds <- rep_len(c("finch","thrush","warbler"),20)
birds2 <- rep_len(c("finch","thrush","warbler"),20)
setequal(birds,birds2)
birds <- rep_len(c("finch","thrush","warbler"),20)
birds2 <- rep_len(c("owl","thrush","warbler"),20)
setequal(birds,birds2)
x <- sample(1:100, size=10)
y <- sample(1:100, size=10)
#use setequal to check if the two vectors are the same.
setequal(x,y)
birds <- rep_len(c("finch","thrush","warbler"),20)
birds2 <- rep_len(c("NA","thrush","warbler"),20)
#using setequal returns a FALSE value because there is one value different
setequal(birds,birds2)
help([)])
help([)
data = c(1,3,5,7,3,2)
#Using brackets will return the third value of the vector
data[3]
A <- 1:16
A <- 1:16
A <- 1:16
A <- 1:16
B <- rep(c("red","blue","green","NA"), each =4)
C <-runif(16)
data <- data.frame(A,B,C,stringsAsFactors = FALSE)
print(data)
data[1,2]
help(which)
sample(x, 1000, replace = FALSE)
x <- runif(1:1000)
# take a sample of 100 from x
# without replacement (we will never find duplicates)
sample(x, 1000, replace = FALSE)
x <- runif(1:10)
# take a sample of 100 from x
# without replacement (we will never find duplicates)
sample(x, 4, replace = FALSE)
# if you sample with replacement, you can sample at a size larger than the original object
#in this case, there will be numbers repeated
sample(x, 11, replace = TRUE)
```
shiny::runApp('AlgerProjects/demo')
# Multi-space separator
cat(x, sep=" . ")
setwd("~/EcoGen/RdataANDcode")
ls()
rm(list=ls())
# set working directory: (files are in /222_Data)
setwd("~/EcoGen/RdataANDcode")
##################################################################################
library("DESeq2")
library("ggplot2")
countsTable <- read.delim('RawData/countsdata_trim2.txt', header=TRUE, stringsAsFactors=TRUE, row.names=1)
countData <- as.matrix(countsTable)
head(countData)
conds <- read.delim("RawData/cols_data_trim.txt", header=TRUE, stringsAsFactors=TRUE, row.names=1)
head(conds)
colData <- as.data.frame(conds)
head(colData)
#################### MODEL NUMBER 1: TEST EFFECT OF HEALTH CONTROLLING FOR LOCATION
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ location + health)
# In this typical model, the "health effect" represents the overall effect of health status
# controlling for differences due to location page 26-27 manual DESeq2.pdf
# The last term in the model is what is tested.  In this case health. You need to rearrange the order
# of the factors in the model to test for the overall effect of a diff. factor.
# This is not the same as an interaction.
dim(dds)
#[1] 13053    77
dds <- dds[ rowSums(counts(dds)) > 100, ]
dim(dds)
#[1] 12954    77  # at > 100; we loose many fewer genes
# For practice, let's work with fewer genes so that the models can run faster...
dds <- dds[sample(nrow(dds), 1200), ]
dim(dds)
colData(dds)$health <- factor(colData(dds)$health, levels=c("H","S")) #sets that "healthy is the reference
dds <- DESeq(dds)
res <- results(dds)
res <- res[order(res$padj),]
head(res)
# log2 fold change (MAP): health S vs H
# Wald test p-value: health S vs H
# DataFrame with 6 rows and 6 columns
# baseMean log2FoldChange     lfcSE
# <numeric>      <numeric> <numeric>
#   TRINITY_DN46709_c0_g1_TRINITY_DN46709_c0_g1_i2_g.23139_m.23139   95.58364       2.916172 0.5141065
# TRINITY_DN45370_c1_g1_TRINITY_DN45370_c1_g1_i1_g.19244_m.19244  326.18876       1.495569 0.2910832
# TRINITY_DN45983_c5_g1_TRINITY_DN45983_c5_g1_i3_g.20837_m.20837 1292.39567       1.514289 0.2904796
# TRINITY_DN44127_c0_g1_TRINITY_DN44127_c0_g1_i1_g.16286_m.16286  250.18334       2.081641 0.4477985
# TRINITY_DN45492_c0_g1_TRINITY_DN45492_c0_g1_i5_g.19587_m.19587  276.71581       1.706664 0.3722197
# TRINITY_DN46924_c3_g1_TRINITY_DN46924_c3_g1_i1_g.23942_m.23942  253.74577       1.146243 0.2648761
# stat           pvalue
# <numeric>        <numeric>
#   TRINITY_DN46709_c0_g1_TRINITY_DN46709_c0_g1_i2_g.23139_m.23139  5.672312 0.00000001408832
# TRINITY_DN45370_c1_g1_TRINITY_DN45370_c1_g1_i1_g.19244_m.19244  5.137942 0.00000027776334
# TRINITY_DN45983_c5_g1_TRINITY_DN45983_c5_g1_i3_g.20837_m.20837  5.213065 0.00000018574588
# TRINITY_DN44127_c0_g1_TRINITY_DN44127_c0_g1_i1_g.16286_m.16286  4.648611 0.00000334177720
# TRINITY_DN45492_c0_g1_TRINITY_DN45492_c0_g1_i5_g.19587_m.19587  4.585099 0.00000453770438
# TRINITY_DN46924_c3_g1_TRINITY_DN46924_c3_g1_i1_g.23942_m.23942  4.327470 0.00001508320259
# padj
# <numeric>
#   TRINITY_DN46709_c0_g1_TRINITY_DN46709_c0_g1_i2_g.23139_m.23139 0.000006001624
# TRINITY_DN45370_c1_g1_TRINITY_DN45370_c1_g1_i1_g.19244_m.19244 0.000039442394
# TRINITY_DN45983_c5_g1_TRINITY_DN45983_c5_g1_i3_g.20837_m.20837 0.000039442394
# TRINITY_DN44127_c0_g1_TRINITY_DN44127_c0_g1_i1_g.16286_m.16286 0.000355899272
# TRINITY_DN45492_c0_g1_TRINITY_DN45492_c0_g1_i5_g.19587_m.19587 0.000386612413
# TRINITY_DN46924_c3_g1_TRINITY_DN46924_c3_g1_i1_g.23942_m.23942 0.001070907384
summary(res)
# out of 1199 with nonzero total read count
# adjusted p-value < 0.1
# LFC > 0 (up)     : 27, 2.3%
# LFC < 0 (down)   : 14, 1.2%
# outliers [1]     : 31, 2.6%
# low counts [2]   : 743, 62%
# (mean count < 25)
#################### MODEL NUMBER 2 - INTERACTIONS
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ location + health + location:health)
dim(dds)
dds <- dds[ rowSums(counts(dds)) > 100, ]
dds <- dds[sample(nrow(dds), 1200), ]
dim(dds)
colData(dds)$health <- factor(colData(dds)$health, levels=c("H","S"))  #sets that "healthy is the reference
dds <- DESeq(dds, parallel=T)
resultsNames(dds)
# [1]  "Intercept"           "location_sub_vs_int" "health_S_vs_H"       "locationsub.healthS"
res <- results(dds, name="locationsub.healthS")
res <- res[order(res$padj),]
head(res)
# log2 fold change (MLE): locationsub.healthS
# Wald test p-value: locationsub.healthS
# DataFrame with 6 rows and 6 columns
# baseMean log2FoldChange     lfcSE
# <numeric>      <numeric> <numeric>
#   TRINITY_DN43786_c1_g1_TRINITY_DN43786_c1_g1_i1_g.15493_m.15493   123.80304      -3.271111 0.6262268
# TRINITY_DN42353_c0_g2_TRINITY_DN42353_c0_g2_i1_g.12717_m.12717 17014.16856       1.440676 0.2997342
# TRINITY_DN47127_c0_g1_TRINITY_DN47127_c0_g1_i3_g.24653_m.24653   264.88795      -1.391774 0.3537203
# TRINITY_DN41442_c3_g5_TRINITY_DN41442_c3_g5_i1_g.11211_m.11211    17.70835      -8.254507 2.0651380
# TRINITY_DN32007_c0_g2_TRINITY_DN32007_c0_g2_i1_g.4284_m.4284      10.50286      -8.011341 2.1704831
# TRINITY_DN28600_c0_g1_TRINITY_DN28600_c0_g1_i1_g.3312_m.3312      30.50985      -5.613068 1.5277455
# stat          pvalue
# <numeric>       <numeric>
#   TRINITY_DN43786_c1_g1_TRINITY_DN43786_c1_g1_i1_g.15493_m.15493 -5.223524 0.0000001755495
# TRINITY_DN42353_c0_g2_TRINITY_DN42353_c0_g2_i1_g.12717_m.12717  4.806512 0.0000015358622
# TRINITY_DN47127_c0_g1_TRINITY_DN47127_c0_g1_i3_g.24653_m.24653 -3.934674 0.0000833096630
# TRINITY_DN41442_c3_g5_TRINITY_DN41442_c3_g5_i1_g.11211_m.11211 -3.997073 0.0000641304917
# TRINITY_DN32007_c0_g2_TRINITY_DN32007_c0_g2_i1_g.4284_m.4284   -3.691041 0.0002233385194
# TRINITY_DN28600_c0_g1_TRINITY_DN28600_c0_g1_i1_g.3312_m.3312   -3.674086 0.0002387024879
# padj
# <numeric>
#   TRINITY_DN43786_c1_g1_TRINITY_DN43786_c1_g1_i1_g.15493_m.15493 0.0001353486
# TRINITY_DN42353_c0_g2_TRINITY_DN42353_c0_g2_i1_g.12717_m.12717 0.0005920749
# TRINITY_DN47127_c0_g1_TRINITY_DN47127_c0_g1_i3_g.24653_m.24653 0.0160579375
# Preliminaries:
# Clear memory of characters:
ls()
rm(list=ls())
# set working directory: (files are in /222_Data)
setwd("~/EcoGen/RdataANDcode")
##################################################################################
library("DESeq2")
library("ggplot2")
countsTable <- read.delim('RawData/countsdata_trim2.txt', header=TRUE, stringsAsFactors=TRUE, row.names=1)
countData <- as.matrix(countsTable)
head(countData)
conds <- read.delim("RawData/cols_data_trim.txt", header=TRUE, stringsAsFactors=TRUE, row.names=1)
head(conds)
colData <- as.data.frame(conds)
head(colData)
#################### MODEL NUMBER 1: TEST EFFECT OF HEALTH CONTROLLING FOR LOCATION
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ location + health)
# In this typical model, the "health effect" represents the overall effect of health status
dim(dds)
#[1] 13053    77
dds <- dds[ rowSums(counts(dds)) > 100, ]
dim(dds)
#[1] 12954    77  # at > 100; we loose many fewer genes
# For practice, let's work with fewer genes so that the models can run faster...
dds <- dds[sample(nrow(dds), 1200), ]
dim(dds)
colData(dds)$health <- factor(colData(dds)$health, levels=c("H","S")) #sets that "healthy is the reference
dds <- DESeq(dds)
res <- results(dds)
res <- res[order(res$padj),]
head(res)
res
res$padj
ddsTS <- DESeqDataSetFromMatrix(countData = countData, colData = colData, ~ health + day + health:day)
ddsTS <- ddsTS[ rowSums(counts(ddsTS)) > 100, ]
ddsTS <- ddsTS[sample(nrow(ddsTS), 1200), ]
dim(ddsTS)
ddsTS <- DESeq(ddsTS, parallel=T, test="LRT", reduced = ~ health + day)
resTS <- results(ddsTS)
resTS$symbol <- mcols(ddsTS)$symbol
head(resTS[order(resTS$padj),],4)
summary(resTS)
plotMA(res, main="DESeq2", ylim=c(-2,2))
## Check out one of the genes to see if it's behaving as expected....
d <- plotCounts(dds, gene="TRINITY_DN44744_c1_g2_TRINITY_DN44744_c1_g2_i2_g.17686_m.17686", intgroup=(c("health","day","location")), returnData=TRUE)
d
p <- ggplot(d, aes(x= health, y=count, shape = location)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3) + ylim(0,500)
p
## Check out one of the genes to see interaction between score, health and expression....
d <- plotCounts(dds, gene="TRINITY_DN46245_c3_g3_TRINITY_DN46245_c3_g3_i2_g.21719_m.21719", intgroup=(c("health","score","location")), returnData=TRUE)
d
p <- ggplot(d, aes(x= score, y=count, shape = health, color = location)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3)
head(group)
ls()
rm(list=ls())
# set working directory: (files are in /222_Data)
setwd("~/EcoGen/RdataANDcode")
##################################################################################
library("DESeq2")
library("ggplot2")
countsTable <- read.delim('RawData/countsdata_trim2.txt', header=TRUE, stringsAsFactors=TRUE, row.names=1)
countData <- as.matrix(countsTable)
head(countData)
conds <- read.delim("RawData/cols_data_trim.txt", header=TRUE, stringsAsFactors=TRUE, row.names=1)
head(conds)
colData <- as.data.frame(conds)
head(colData)
#################### MODEL NUMBER 1: TEST EFFECT OF HEALTH CONTROLLING FOR LOCATION
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ location + health)
# In this typical model, the "health effect" represents the overall effect of health status
# controlling for differences due to location page 26-27 manual DESeq2.pdf
# The last term in the model is what is tested.  In this case health. You need to rearrange the order
# of the factors in the model to test for the overall effect of a diff. factor.
# This is not the same as an interaction.
dim(dds)
#[1] 13053    77
dds <- dds[ rowSums(counts(dds)) > 100, ]
dim(dds)
#[1] 12954    77  # at > 100; we loose many fewer genes
# For practice, let's work with fewer genes so that the models can run faster...
dds <- dds[sample(nrow(dds), 1200), ]
dim(dds)
colData(dds)$health <- factor(colData(dds)$health, levels=c("H","S")) #sets that "healthy is the reference
dds <- DESeq(dds)
res <- results(dds)
res <- res[order(res$padj),]
head(res)
summary(res)
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ location + health + location:health)
dim(dds)
dds <- dds[ rowSums(counts(dds)) > 100, ]
dds <- dds[sample(nrow(dds), 1200), ]
dim(dds)
colData(dds)$health <- factor(colData(dds)$health, levels=c("H","S"))  #sets that "healthy is the reference
dds <- DESeq(dds, parallel=T)
resultsNames(dds)
# [1]  "Intercept"           "location_sub_vs_int" "health_S_vs_H"       "locationsub.healthS"
res <- results(dds, name="locationsub.healthS")
res <- res[order(res$padj),]
head(res)
# log2 fold change (MLE): locationsub.healthS
# Wald test p-value: locationsub.healthS
# DataFrame with 6 rows and 6 columns
# baseMean log2FoldChange     lfcSE
# <numeric>      <numeric> <numeric>
#   TRINITY_DN43786_c1_g1_TRINITY_DN43786_c1_g1_i1_g.15493_m.15493   123.80304      -3.271111 0.6262268
# TRINITY_DN42353_c0_g2_TRINITY_DN42353_c0_g2_i1_g.12717_m.12717 17014.16856       1.440676 0.2997342
# TRINITY_DN47127_c0_g1_TRINITY_DN47127_c0_g1_i3_g.24653_m.24653   264.88795      -1.391774 0.3537203
# TRINITY_DN41442_c3_g5_TRINITY_DN41442_c3_g5_i1_g.11211_m.11211    17.70835      -8.254507 2.0651380
# TRINITY_DN32007_c0_g2_TRINITY_DN32007_c0_g2_i1_g.4284_m.4284      10.50286      -8.011341 2.1704831
# TRINITY_DN28600_c0_g1_TRINITY_DN28600_c0_g1_i1_g.3312_m.3312      30.50985      -5.613068 1.5277455
# stat          pvalue
# <numeric>       <numeric>
#   TRINITY_DN43786_c1_g1_TRINITY_DN43786_c1_g1_i1_g.15493_m.15493 -5.223524 0.0000001755495
# TRINITY_DN42353_c0_g2_TRINITY_DN42353_c0_g2_i1_g.12717_m.12717  4.806512 0.0000015358622
# TRINITY_DN47127_c0_g1_TRINITY_DN47127_c0_g1_i3_g.24653_m.24653 -3.934674 0.0000833096630
# TRINITY_DN41442_c3_g5_TRINITY_DN41442_c3_g5_i1_g.11211_m.11211 -3.997073 0.0000641304917
# TRINITY_DN32007_c0_g2_TRINITY_DN32007_c0_g2_i1_g.4284_m.4284   -3.691041 0.0002233385194
# TRINITY_DN28600_c0_g1_TRINITY_DN28600_c0_g1_i1_g.3312_m.3312   -3.674086 0.0002387024879
# padj
# <numeric>
#   TRINITY_DN43786_c1_g1_TRINITY_DN43786_c1_g1_i1_g.15493_m.15493 0.0001353486
# TRINITY_DN42353_c0_g2_TRINITY_DN42353_c0_g2_i1_g.12717_m.12717 0.0005920749
# TRINITY_DN47127_c0_g1_TRINITY_DN47127_c0_g1_i3_g.24653_m.24653 0.0160579375
# TRINITY_DN41442_c3_g5_TRINITY_DN41442_c3_g5_i1_g.11211_m.11211 0.0160579375
# TRINITY_DN32007_c0_g2_TRINITY_DN32007_c0_g2_i1_g.4284_m.4284   0.0306732697
# TRINITY_DN28600_c0_g1_TRINITY_DN28600_c0_g1_i1_g.3312_m.3312   0.0306732697
summary(res)
#
# out of 1199 with nonzero total read count
# adjusted p-value < 0.1
# LFC > 0 (up)     : 2, 0.17%
# LFC < 0 (down)   : 10, 0.83%
# outliers [1]     : 35, 2.9%
# low counts [2]   : 394, 33%
# (mean count < 9)
#################### MODEL NUMBER 3 - GROUP DESIGNS can be used for contrasts of interest or interactions
colData$group <- factor(paste0(colData$location, ".", colData$health, ".", colData$score))
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ group)
dim(dds)
dds <- dds[ rowSums(counts(dds)) > 100, ]
dds <- dds[sample(nrow(dds), 1200), ]
dim(dds)
dds <- DESeq(dds, parallel=T)
resultsNames(dds)
res <- results(dds, contrast=list( c("groupint.H.0","groupsub.H.0"), c("groupint.S.1","groupsub.S.1")), listValues=c(1/2, -1/2))
res <- res[order(res$padj),]
head(res)
